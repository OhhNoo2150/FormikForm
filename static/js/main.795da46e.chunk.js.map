{"version":3,"sources":["App.js","index.js"],"names":["validate","values","errors","nameField","name","pswField","password","emailField","test","email","App","formik","useFormik","initialValues","onSubmit","alert","console","log","errorStyle","color","handleSubmit","id","type","onChange","handleChange","onBlur","handleBlur","value","touched","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAGMA,EAAW,SAAAC,GACf,IAAIC,EAAS,GAab,OAZKD,EAAOE,YACVD,EAAOE,KAAO,kBAEXH,EAAOI,WACVH,EAAOI,SAAW,kBAEfL,EAAOM,WAEA,4CACTC,KAAKP,EAAOM,cACbL,EAAOO,MAAQ,+BAHfP,EAAOO,MAAQ,iBAKVP,GAyCMQ,MAtCf,WAEE,IAAMC,EAASC,YAAU,CACvBC,cAAe,CACbN,WAAY,GACZF,SAAU,IAEZL,WACAc,SAAU,SAAAb,GACNc,MAAM,qBACNC,QAAQC,IAAI,QAAShB,MAIrBiB,EAAa,CACjBC,MAAO,OAGT,OACE,8BACE,uBAAML,SAAUH,EAAOS,aAAvB,UACE,uCACA,uBACEC,GAAG,YAAYC,KAAK,OAAOC,SAAUZ,EAAOa,aAAcC,OAAQd,EAAOe,WAAYC,MAAOhB,EAAOV,OAAOE,YAAcQ,EAAOiB,QAAQzB,WAAaQ,EAAOT,OAAOE,KAAQ,qBAAKiB,GAAG,YAAYQ,MAAOX,EAA3B,SAAwCP,EAAOT,OAAOO,QAAgB,KAClP,wCACA,uBACEY,GAAG,aAAaC,KAAK,QAAQC,SAAUZ,EAAOa,aAAcC,OAAQd,EAAOe,WAAYC,MAAOhB,EAAOV,OAAOM,aAAeI,EAAOiB,QAAQrB,YAAcI,EAAOT,OAAOO,MAAS,qBAAKY,GAAG,aAAaQ,MAAOX,EAA5B,SAAyCP,EAAOT,OAAOO,QAAgB,KAExP,2CACA,uBAAOY,GAAG,WAAWC,KAAK,WAAWC,SAAUZ,EAAOa,aAAcC,OAAQd,EAAOe,WAAYC,MAAOhB,EAAOV,OAAOI,WAAaM,EAAOiB,QAAQvB,UAAYM,EAAOT,OAAOI,SAAY,qBAAKe,GAAG,WAAWQ,MAAOX,EAA1B,SAAuCP,EAAOT,OAAOI,WAAmB,KAAK,uBAEnQ,wBAAQgB,KAAK,SAASD,GAAG,YAAzB,0BC/CRS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.795da46e.chunk.js","sourcesContent":["import React from \"react\";\nimport { FormikContext, useFormik } from 'formik';\n\nconst validate = values => {\n  let errors = {};\n  if (!values.nameField) {\n    errors.name = 'Field required';\n  }\n  if (!values.pswField) {\n    errors.password = 'Field required';\n  }\n  if (!values.emailField) {\n    errors.email = 'Field required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\n    .test(values.emailField)) {\n    errors.email = 'Username should be an email';\n  }\n  return errors;\n}\n\nfunction App() {\n\n  const formik = useFormik({\n    initialValues: {\n      emailField: '',\n      pswField: ''\n    },\n    validate,\n    onSubmit: values => {\n        alert('Login Successful!');\n        console.log('form:', values);\n    }\n  });\n\n  const errorStyle = {\n    color: 'red'\n  }\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>        \n        <div>Name</div>\n        <input\n          id='nameField' type='name' onChange={formik.handleChange} onBlur={formik.handleBlur} value={formik.values.nameField} />{formik.touched.nameField && formik.errors.name ? (<div id='nameError' style={errorStyle}>{formik.errors.email}</div>) : null}\n        <div>Email</div>\n        <input\n          id='emailField' type='email' onChange={formik.handleChange} onBlur={formik.handleBlur} value={formik.values.emailField} />{formik.touched.emailField && formik.errors.email ? (<div id='emailError' style={errorStyle}>{formik.errors.email}</div>) : null}\n\n        <div>Password</div>\n        <input id='pswField' type='password' onChange={formik.handleChange} onBlur={formik.handleBlur} value={formik.values.pswField} />{formik.touched.pswField && formik.errors.password ? (<div id='pswError' style={errorStyle}>{formik.errors.password}</div>) : null}<br />\n\n        <button type='submit' id='submitBtn'>Submit</button>\n\n      </form>\n    </div>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}